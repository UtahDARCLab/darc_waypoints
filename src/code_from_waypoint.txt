
/* old void fill function saved if needed
void fillPositionList(std::vector<geometry_msgs::Vector3>& posList)
{
    geometry_msgs::Vector3 left, right, front, back, top, bottom, middle;
    geometry_msgs::Vector3 top_left, top_right, bot_left, bot_right;
    double del = 0.4;
    double xCen,yCen,zCen;
    //xCen = 1.21; yCen = -1.3; zCen = 1.2;
    //xCen = 0.0; yCen = 0.0; zCen = 0.0; // Andy crazy flie stuff
    //xCen = 0.0; yCen = 0.0; zCen = 0.3; // Andy crazy flie stuff
    xCen = 0.5; yCen = -1.1; zCen = 0.6; 
    middle.x = xCen;       middle.y = yCen;       middle.z = zCen;
    left.x   = xCen;       left.y   = yCen+del;   left.z   = zCen;
    right.x  = xCen;       right.y  = yCen - del; right.z  = zCen;
    front.x  = xCen + del; front.y  = yCen;       front.z  = zCen;
    back.x   = xCen - del; back.y   = yCen;       back.z   = zCen;
    top.x    = xCen;       top.y    = yCen;       top.z    = zCen + del;
    bottom.x = xCen;       bottom.y = yCen;       bottom.z = zCen - del;
    
    // Square terms
    top_left.x  = xCen + del;     top_left.y = yCen + 1.0*del;     top_left.z = zCen;
    top_right.x = xCen + del;    top_right.y = yCen - 1.0*del;    top_right.z = zCen;
    bot_left.x  = xCen - del;     bot_left.y = yCen + 1.0*del;     bot_left.z = zCen;
    bot_right.x = xCen - del;    bot_right.y = yCen - 1.0*del;    bot_right.z = zCen;
    
    // Tirangle terms
    geometry_msgs::Vector3 tritop, trileft, triright;
    tritop.x = xCen + del; tritop.y = yCen; tritop.z = zCen;
    trileft.x = xCen - 0.5*del; trileft.y = yCen + 0.866*del; trileft.z = zCen;
    triright.x = xCen - 0.5*del; triright.y = yCen - 0.866*del; triright.z = zCen;
        
    
    // ground effects testing terms
    geometry_msgs::Vector3 ground;
    double height = 0.75;//1.25;
    int numSteps = 100;
    double yList[] = {-1.5, -1.0, -0.75, -0.65, -0.60};
    ground.x = 1.0; ground.y = -1.25; ground.z = height;
	double radius = 0.5; //radius of the circle trajectory in meters
	xCen = 0.75;
 	yCen = -0.8;
    if ( robotName == "quad1" )
    {
        if ( shape == 1 ) // square
        {
            posList.push_back(bot_left);
            posList.push_back(top_left);
            posList.push_back(top_right);
            posList.push_back(bot_right);
        }
        else if ( shape == 2 ) //triangle
        {
            posList.push_back(tritop);
            posList.push_back(trileft);
            posList.push_back(triright);
        }
        
        else if (shape == 3) //  proximity effects testing
        {
            ground.x = 1.0; ground.y = -0.5; ground.z = height;
            //for(int n = 0; n < numSteps; n++)
            {               
                //ground.y = yList[n];    
                posList.push_back(ground);
                //ground.z -= height/double(numSteps + 1);
            }
        
        }
		else if (shape == 4) // circle
		{
			ground.z = height;
			
			for(int n = 0; n < numSteps; n++)
			{
				ground.x = xCen + radius*cos((double)n*2.0*M_PI/((double)numSteps));
				ground.y = yCen + radius*sin((double)n*2.0*M_PI/((double)numSteps));
				posList.push_back(ground);
			}
		}
			
    }
    else if ( robotName == "quad2" )
    {
        if( shape == 1 ) // square
        {
            posList.push_back(top_left);
            posList.push_back(top_right);
            posList.push_back(bot_right);
            posList.push_back(bot_left);
        }
        else if ( shape == 2 ) //triangle
        {
            posList.push_back(trileft);
            posList.push_back(triright);
            posList.push_back(tritop);
        }
        else if (shape == 3) // proximity effects testing
        {
            ground.x = 1.0; ground.y = -0.5; ground.z = height;
			/*
            for(int n = 0; n < numSteps; n++)
            {
                ground.y = yList[n];       
                posList.push_back(ground);
                //ground.z -= height/double(numSteps + 1);
            }
        
        }
    }
    else if ( robotName == "quad3" )
    {
        if( shape == 1) // square
        {
            posList.push_back(top_right);
            posList.push_back(bot_right);
            posList.push_back(bot_left);
            posList.push_back(top_left);
        }
        else if ( shape == 2 ) // triangle
        {
            posList.push_back(triright);
            posList.push_back(tritop);
            posList.push_back(trileft);
        }
        else if (shape == 3) //  proximity effects testing
        {
            //ground.x = 0.0; ground.y = 0.0; ground.z = height;
            for(int n = 0; n < numSteps; n++)
            {       
                posList.push_back(ground);
                //ground.z -= height/double(numSteps + 1);
            }
        
        }
    }

    /*